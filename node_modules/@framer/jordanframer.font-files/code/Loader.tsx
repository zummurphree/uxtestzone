import * as React from 'react'
import { Frame, addPropertyControls, ControlType, RenderTarget } from 'framer'

export function Loader(props) {
  ////////////////////////////////////////////////////////////////////////////////
  // Environment Variables

  const isThumbnail = RenderTarget.current() === RenderTarget.thumbnail
  const isCanvas = RenderTarget.current() === RenderTarget.canvas

  ////////////////////////////////////////////////////////////////////////////////
  // Properties

  const { source, url, children, enabled } = props

  ////////////////////////////////////////////////////////////////////////////////
  // Shared Style

  const lineHeight = isThumbnail ? '42px' : '24px'
  const textColor = isThumbnail ? '#808080' : '#ffffff'
  const displayStyle = { color: textColor, padding: '24px', lineHeight }

  ////////////////////////////////////////////////////////////////////////////////
  // Display Thumbnail

  if (isThumbnail) {
    return (
      <Frame
        name="Loader - Thumbnail"
        size={'100%'}
        background={''}
        style={{ fontSize: 120, ...displayStyle }}
      >
        Fonts
        <br />
      </Frame>
    )
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Show Warning

  let showWarning = false
  if (isCanvas) {
    if (source === 'url' && url === '') showWarning = true
    if (source === 'file' && children.length < 1) showWarning = true
  }

  if (showWarning) {
    return (
      <Frame
        name="Loader - Warning"
        key={props.id}
        size={'100%'}
        background={'#000'}
        style={{ fontSize: 24, textAlign: 'center', ...displayStyle }}
        radius={8}
      >
        {`⚠️ Add font ${source === 'file' ? 'files' : 'URL'} to load.`}
      </Frame>
    )
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Option 1. Import the url

  if (source === 'url') {
    let tag = <></>
    let style = document.getElementById(props.id)

    if (enabled) {
      const importUrl = `@import url('${url}');`
      if (style) {
        style.innerHTML = importUrl
      } else {
        tag = <style id={props.id}>{importUrl}</style>
      }
    } else {
      if (style) style.innerHTML = ''
    }
    return tag
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Option 2. Load in the Font Files

  return (
    <Frame
      name="Loader"
      size={0}
      visible={enabled ? true : false}
      background={null}
      overflow={'hidden'}
      key={props.id}
    >
      {children}
    </Frame>
  )
}

////////////////////////////////////////////////////////////////////////////////
// React Default Properties - Used by Framer Canvas and Property Panel

Loader.defaultProps = {
  height: 100,
  width: 300,
  source: 'file',
  url: '',
  enabled: true,
}

////////////////////////////////////////////////////////////////////////////////
// Framer Property Controls

addPropertyControls(Loader, {
  enabled: {
    title: 'Enabled',
    type: ControlType.Boolean,
    defaultValue: Loader.defaultProps.enabled,
    enabledTitle: 'YES',
    disabledTitle: 'NO',
  },
  source: {
    title: 'Source',
    type: ControlType.SegmentedEnum,
    options: ['file', 'url'],
    optionTitles: ['FILES', 'URL'],
    defaultValue: Loader.defaultProps.source,
  },
  url: {
    title: 'URL',
    type: ControlType.String,
    defaultValue: '',
    placeholder: 'https://',
    hidden: ({ source }) => source != 'url',
  },
  uiFiles: {
    title: 'Files',
    type: ControlType.Enum,
    options: ['↓ Add Fonts Below ↓'],
    displaySegmentedControl: true,
    hidden: props => props.source != 'file',
  },
  children: {
    title: 'Font Files',
    type: ControlType.Array,
    propertyControl: {
      type: ControlType.ComponentInstance,
    },
    hidden: ({ source }) => {
      return source === 'url'
      if (source === 'file') return false
      if (source === 'url') return true
    },
  },
})
