import * as React from 'react'
import { Frame, addPropertyControls, ControlType, RenderTarget } from 'framer'

////////////////////////////////////////////////////////////////////////////////
// TODO
////////////////////////////////////////////////////////////////////////////////
//
// * Add Individual Web Url Files
// * Find how to add custom font Family
//
////////////////////////////////////////////////////////////////////////////////
// DONE
//
// * Injecting fonts to the canvas
// * Add Enabled property to allow to toggle on / off
// * Clean Up filename output - When loaded from Web
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// CSS Font Rule

function fontCss(name, path, enabled) {
  const decodedPath = containsEncodedComponents(path)
    ? decodeURIComponent(path)
    : path
  // If it's not enabled return blank
  if (!enabled) return ``
  return `
        @font-face {
            font-family: '${name}';
            src: url(${decodedPath});
            font-weight: 900;
        }`
}

function containsEncodedComponents(uri) {
  // ie ?,=,&,/ etc
  return decodeURI(uri) !== decodeURIComponent(uri)
}

////////////////////////////////////////////////////////////////////////////////
// CONSTANTS

const ID_PREFIX = 'FontFiles_'
const MSG_FONT_NAME = '⚠️ Add font CSS name.'
const MSG_FONT_FILE = '💾 Include a file for this font.'
const THUMB_NAME_TEXT = 'Font '
const THUMB_FILE_TEXT = ''

////////////////////////////////////////////////////////////////////////////////
// File Component
////////////////////////////////////////////////////////////////////////////////

export function File(props) {
  ////////////////////////////////////////////////////////////////////////////////
  // Environment Variables

  const isThumbnail = RenderTarget.current() === RenderTarget.thumbnail
  const isCanvas = RenderTarget.current() === RenderTarget.canvas
  const isPreview = RenderTarget.current() === RenderTarget.preview
  // Framer Web Specific
  const isFramerWebShare = document.location.href.match(/^.+(\/ui\/run.html)/)
  const isFramerWeb = document.location.href.match(/framer.com\/s\/vekter[.]/)
  const isFramerWebPreview = isFramerWeb && isPreview
  const isFramerWebCanvas = isFramerWeb && isCanvas

  ////////////////////////////////////////////////////////////////////////////////
  // Props / State / Ref Hook

  const { cssName, filePath, enabled } = props

  const [id] = React.useState(props.id)
  const styleTag = React.useRef(null)

  ////////////////////////////////////////////////////////////////////////////////
  // Variables

  // Text sizing
  const fontSize = isThumbnail ? 120 : 24
  const lineHeight = isThumbnail ? 42 : 24
  const textColor = isThumbnail ? '#808080' : '#ffffff'

  // Font Name & Path
  let name = cssName
  let file = filePath
  let fileName = filePath.replace(/^.+\//g, '')
  let scrubbedPath = filePath.replace('/preview', '')

  // Adjust for Environment
  scrubbedPath = isFramerWebShare ? `../${scrubbedPath}` : scrubbedPath

  file = fileName

  // Get File Type for Files uploaded on Web
  if (containsEncodedComponents(file) || file.match(/&Key-Pair-Id=/)) {
    const webFileTypeEncoded = file.match(/^\w+([.]{1}[a-zA-z]{3,})%3F/)
    const webFileTypeDecoded = file.match(/^\w+([.]{1}[a-zA-z]{3,})?/)
    if (webFileTypeEncoded && webFileTypeEncoded.length >= 2) {
      file = webFileTypeEncoded[1] + ''
    } else if (webFileTypeDecoded && webFileTypeDecoded.length >= 2) {
      file = webFileTypeDecoded[1] + ''
    }
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Style DOM Node

  // Check for style tag Ref, if none, use existing style element or create one

  if (!styleTag.current) {
    const tagId = ID_PREFIX + id
    const dom = document.getElementById(tagId)
    if (dom) {
      styleTag.current = dom
    } else {
      styleTag.current = document.createElement('style')
      styleTag.current.id = tagId
      document.head.appendChild(styleTag.current)
    }
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Lifecycle

  // Props Change on cssName or filePath ////////////////////////////////////////

  function cssInject(css) {
    if (enabled && styleTag.current)
      styleTag.current.appendChild(document.createTextNode(css))
  }

  function cssReplace(css) {
    cssClear()
    cssInject(css)
  }

  function cssClear() {
    if (styleTag.current) styleTag.current.innerHTML = ''
  }

  React.useEffect(() => {
    const css = fontCss(cssName, scrubbedPath, enabled)
    if (styleTag.current.innerHTML != css) cssReplace(css)
    return function cleanUp() {
      cssClear()
    }
  }, [cssName, filePath, enabled])

  ////////////////////////////////////////////////////////////////////////////////
  // Empty & Thumbnail Display

  // Handle Incomplete Components
  if (name === '') name = MSG_FONT_NAME
  if (file === '') file = MSG_FONT_FILE

  // Handle Thumbnail
  if (isThumbnail) name = THUMB_NAME_TEXT
  if (isThumbnail) file = THUMB_FILE_TEXT

  ////////////////////////////////////////////////////////////////////////////////
  // Styles

  // Styles for Canvas Preview
  const ellipsisStyle: React.CSSProperties = {
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
  }

  const cssFontFamily =
    isThumbnail || cssName === '' ? cssName : CSS.escape(name)

  const nameStyle: React.CSSProperties = {
    fontFamily: `${cssFontFamily}, monospace`,
    fontSize: fontSize,
    lineHeight: `${lineHeight}px`,
    color: textColor,
    padding: '24px',
    ...ellipsisStyle,
  }

  const fileStyle: React.CSSProperties = {
    display: 'block',
    fontSize: '.5em',
    marginTop: '.5em',
    opacity: 0.5,
    ...ellipsisStyle,
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Component Render

  return (
    <Frame
      name="File"
      size={'100%'}
      background={isThumbnail ? '' : '#000'}
      style={nameStyle}
      radius={8}
    >
      {name}
      <code style={fileStyle}>{file}</code>
      <br />
      <Frame
        name="FileCover"
        size={'100%'}
        top={0}
        left={0}
        background={isThumbnail ? '' : '#000'}
        visible={!enabled}
        opacity={0.65}
        radius={'inherit'}
      />
    </Frame>
  )
}

////////////////////////////////////////////////////////////////////////////////
// React Default Properties - Used by Framer Canvas and Property Panel

File.defaultProps = {
  height: 100,
  width: 300,
  cssName: '',
  filePath: '',
  enabled: true,
}

////////////////////////////////////////////////////////////////////////////////
// Framer Property Controls

addPropertyControls(File, {
  enabled: {
    title: 'Enabled',
    type: ControlType.Boolean,
    defaultValue: File.defaultProps.enabled,
    enabledTitle: 'YES',
    disabledTitle: 'NO',
  },
  cssName: {
    title: 'CSS Name',
    type: ControlType.String,
    defaultValue: File.defaultProps.cssName,
  },
  filePath: {
    title: 'Font File',
    type: ControlType.File,
    allowedFileTypes: ['ttf', 'woff', 'otf', 'eot', 'woff2'],
  },
})
